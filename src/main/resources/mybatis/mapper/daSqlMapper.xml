<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.st11.dbshowapi.repository.sql.DaSqlMapper">

    <resultMap id="sqlAreaVo" type="com.st11.dbshowapi.repository.sql.SqlAreaVO">
        <result property="instId" column="instId" jdbcType="NUMERIC" javaType="int" />
        <result property="sqlId" column="sqlId" jdbcType="VARCHAR" javaType="String" />
        <result property="planHashValue" column="planHashValue" />
        <result property="parsingSchemaName" column="parsingSchemaName" />
        <result property="module" column="module" />
        <result property="program_id" column="program_id" />
        <result property="executions" column="executions" />
        <result property="blockPerExec" column="blockPerExec" />
        <result property="lastActiveTime" column="lastActiveTime" />
        <result property="firstLoadTime" column="firstLoadTime" />
        <result property="commandType" column="commandType" />
        <result property="sqlFullText" column="sqlFullText" jdbcType="CLOB" javaType="String" />
    </resultMap>

    <select id="getSqlAreaListAll" resultType="com.st11.dbshowapi.repository.sql.SqlAreaVO">
        <![CDATA[
        Select /* daSqlMapper.xml/getSqlAreaListAll - ns: SqlAreaMapper by rohys03 */
          sql_id sqlId,
          sql_text sqlText,
          (SELECT name FROM audit_actions WHERE ACTION = s.command_type) commandType,
          executions executions,
          buffer_gets bufferGets,
          module module,
          last_active_time lastActiveTime,
          first_load_time firstLoadTime,
          child_number childNumber,
          parsing_schema_name parsingSchemaName
--         From temp$sql s
        From gv$sql s
        where 1=1
        and rownum <= 10
        ]]>
    </select>

    <select id="getSqlAreaList" parameterType="hashmap" resultType="com.st11.dbshowapi.repository.sql.SqlAreaVO">
        <![CDATA[
        with dep as
            (
              select /*+ inline */ *
              from   gv$object_dependency c
              where  to_owner = upper(#{owner} )
              and    to_name = upper( #{name} )
            ),
            sqlarea as
            (
              select inst_id, sql_id, address, hash_value
              from   (
                       select /*+ no_merge */ a.*,
                              row_number( ) over( partition by sql_id order by executions desc ) sql_rn
                       from   (
                                select /*+ no_merge */ a.*,
                                       row_number( ) over( partition by plan_hash_value order by executions desc ) phv_rn
                                from   (
                                         select /*+ no_merge */ inst_id, sql_id, plan_hash_value, executions, address, hash_value
                                         from   gv$sqlarea a
                                         where  force_matching_signature != 0
                                         and    parsing_schema_name not in ( 'SYS', 'SYSMAN', 'DBSNMP', 'SYSTEM', 'EXFSYS' )
                                         and    not regexp_like( nvl( module, '-' ), 'Orange|SQL Developer|SQLGate|Data Pump|TOAD|golden|ERwin|PL.SQL Developer|SQL Loader|sqlplus|SQL.Plus' )
                                         and    instr( upper( sql_fulltext ), upper( #{name} ) ) > 0
                                         ]]>

        <choose>
            <when test = "commandType == 'SELECT'">
                AND command_type in ( 3 )
            </when>
            <when test = "commandType == 'DML'">
                AND command_type in ( 2, 6, 7, 26, 189, 191 )
            </when>
            <when test = "commanType == 'OTHERS'">
                AND command_type not in ( 2, 3, 6, 7, 26, 189, 191 )
            </when>
        </choose>

        <![CDATA[
                                       ) a
                              ) a
                       where  phv_rn = 1
                     ) a
              where  sql_rn = 1
            )
            select /* daSqlMapper.xml/getSqlareaList - ns: SqlAreaMapper by rohys03 */ /*+ ordered use_hash(b) no_swap_join_inputs(b) */
                   b.inst_id instId,
                   b.sql_id sqlId,
                   b.plan_hash_value planHasshValue,
                   b.parsing_schema_name parsingSchemaName,
                   b.module module,
                   case when b.program_id = 0 then null else b.program_id end as program_id,
                   b.executions executions,
                   b.buffer_gets bufferGets,
                   round( b.buffer_gets / decode( b.executions, 0, 1, b.executions ) ) as blockPerExec,
                   b.last_active_time lastActiveTime,
                   b.first_load_time firstLoadTime,
--                    b.Command_type commandType,
                   (select c.command_name from v$sqlcommand c where c.command_type = b.command_type) commandType,
                   dbms_lob.substr( sql_fulltext, 2000, 1      ) as sqlText,
                   case when ( (regexp_instr(sql_text, '\/\*[^+]',1) > 0 ) and (regexp_instr(sql_text, '\*\/', 1) > 0) )
                        then trim(substr(sql_text, regexp_instr(substr(sql_text, 1, 100) , '\/\*[^+]',1), regexp_instr(sql_text, '\*\/', decode(regexp_instr(sql_text, '\/\*[^+]',1), 0, 1, regexp_instr(sql_text, '\/\*[^+]',1))) - regexp_instr(sql_text, '\/\*[^+]',1) + 2))
                   else ''
                   end sqlName
            from   sqlarea a,
                   gv$sqlarea b
            where  a.inst_id = b.inst_id
            and    a.sql_id = b.sql_id
            and    exists (
                            select /*+ unnest hash_sj push_subq swap_join_inputs(c)  */ 'x'
                            from   dep c
                            where  a.address = c.from_address
                            and    a.hash_value = c.from_hash
                          )
        ]]>
    </select>

    <select id="getSqlAreaDetail" parameterType="hashmap" resultMap="sqlAreaVo">
        <![CDATA[
            select /* daSqlMapper.xml/getSqlAreaDetail - ns: SqlAreaMapper by rohys03 */
                b.inst_id instId,
                b.sql_id sqlId,
                b.plan_hash_value planHashValue,
                b.parsing_schema_name parsingSchemaName,
                b.module module,
                case when b.program_id = 0 then null else b.program_id end as program_id,
                b.executions executions,
                b.buffer_gets bufferGets,
                round( b.buffer_gets / decode( b.executions, 0, 1, b.executions ) ) as blockPerExec,
                b.last_active_time lastActiveTime,
                b.first_load_time firstLoadTime,
--                 b.Command_type commandType,
                (select c.command_name from v$sqlcommand c where c.command_type = b.command_type) commandType,
                b.sql_fulltext sqlFullText,
                case when ( (regexp_instr(sql_text, '\/\*[^+]',1) > 0 ) and (regexp_instr(sql_text, '\*\/', 1) > 0) )
                    then trim(substr(sql_text, regexp_instr(substr(sql_text, 1, 100) , '\/\*[^+]',1), regexp_instr(sql_text, '\*\/', decode(regexp_instr(sql_text, '\/\*[^+]',1), 0, 1, regexp_instr(sql_text, '\/\*[^+]',1))) - regexp_instr(sql_text, '\/\*[^+]',1) + 2))
                else ''
                end sqlName
            from   gv$sqlarea b
            where 1=1
            and sql_id = #{searchString}
            and rownum = 1
        ]]>
    </select>

    <select id="getTopSqlList" parameterType="hashmap" resultType="com.st11.dbshowapi.repository.sql.TopSqlVO">
        <![CDATA[
        SELECT /* daSqlMapper.xml/getTopSqlList - ns: daSqlMapper by rohys03 */
              Hist_dt histDt, node instId, SCHEMA schema, sql_id sqlId, Module module, serv service, first_load_dt firstLoadTime
            , bgets_rk bgetsRank, cpu_rk cpuRank, ela_rk elapRank, exec_rk execRank, dreads_rk diskReadRank
            , bgets_rto bgetsRatio, cpu_rto cpuRatio, ela_rto elapRatio, exec_rto execRatio, dreads_rto diskReadRatio
            , exec executions, bgets bgets, dreads diskRead, ela elapTime, cpu cpuTime
            , sql_text sqlText
        FROM tmall.DA_TOPSQL_HIST
        WHERE hist_dt BETWEEN to_Date( #{date} , 'YYYYMMDD') AND to_Date( #{date} ,'YYYYMMDD') + 1
        AND node = #{instId}
        ORDER BY bgets_rk asc
        ]]>
    </select>

    <select id="getSqlNameList" parameterType="hashmap" resultType="com.st11.dbshowapi.repository.sql.SqlNameVO">
        Select /* daSqlMapper.xml/getSqlNameList - ns: by rohys03 */
              /*+ ORDERED USE_NL(L S) INDEX(L PK_DA_SQLNAME_LIST)  */
            L.SQL_NAME sqlName,
            L.REP_SQL_ID repSqlId,
            L.Parsing_schema_name parsingSchemaName,
            l.Module module,
            l.Last_active_time LastActiveTime,
            S.CLCT_DY clctDy,
            S.DB_ID dbId,
            S.SQL_NAME_NO sqlNameNo,
            S.CURR_TOTAL_EXEC currTotalExec,
            S.PREV_TOTAL_EXEC prevTotalExec,
            S.EXEC_DIFF execDiff,
            S.CURR_TOTAL_BGET currTotalBget,
            S.PREV_TOTAL_BGET prevTotalBget,
            S.BGET_DIFF bgetDiff,
            S.CURR_TOTAL_CPU currTotalCpu,
            S.PREV_TOTAL_CPU prevTotalCpu,
            S.CPU_DIFF cpuDiff,
            S.CURR_TOTAL_ELA currTotalElap,
            S.PREV_TOTAL_ELA prevTotalElap,
            S.ELA_DIFF elapDiff,
            S.CURR_CLCT_DY currClctDy,
            S.PREV_CLCT_DY prevClctDy,
            S.CREATE_DT createDt
        From dauser.da_sqlname_list L, dauser.da_sqlname_stats s
        where 1=1
        and l.SQL_NAME_NO = s.SQL_NAME_NO(+)
        and l.db_id = s.db_id(+)
        and s.CLCT_DY = #{clctDy}
        <if test="sqlName != null">
            AND S.SQL_NAME_NO in (select sql_name_no from dauser.da_sqlname_list where sql_name like '%'||#{sqlName}||'%' )
        </if>

        <if test="tableName != null">
            and l.sql_name_no in (select /*+ leading(T) use_nl(Info) index(INFO IX1_DA_SQLNAME_DTL_INFO) */
              info.sql_name_no
            From DAuser.DA_SQLNAME_DTL_INFO Info, dauser.da_tables t
            where info.owner = t.owner(+)
            and info.object_name = t.table_name(+)
            and object_type = 'TABLE'
            <if test="owner != null">
                and info.owner = #{owner}
            </if>
            <if test="tableName != null">
                and info.object_name = #{tableName}
            </if>
            )
        </if>
        <if test="logicalAreaCd != null or logicalAreaCd2 != null  or subjAreaCd != null ">
            and l.sql_name_no in (select /*+ leading(T) use_nl(Info) index(INFO IX1_DA_SQLNAME_DTL_INFO) */
              info.sql_name_no
            From DAuser.DA_SQLNAME_DTL_INFO Info, dauser.da_tables t
            where info.owner = t.owner(+)
            and info.object_name = t.table_name(+)
            and object_type = 'TABLE'
            <if test="logicalAreaCd != null">
                and T.LOGIC_AREA_CD = #{logicalAreaCd}
            </if>
            <if test="logicalAreaCd2 != null">
                and T.LOGIC_AREA_CD2 = #{logicalAreaCd2}
            </if>
            <if test="subjAreaCd != null">
                and T.SUBJ_AREA_CD = #{subjAreaCd}
            </if>
            )
        </if>
        ORDER BY execDiff desc nulls last, L.SQL_NAME, L.DB_ID, S.CLCT_DY desc
    </select>
    
    <select id="getSqlNameStatsHist" parameterType="hashmap" resultType="com.st11.dbshowapi.repository.sql.SqlNameStatsVO">
        SELECT /* daSqlMapper.xml/getSqlNameStatsHist - ns: by rohys03 */
            CLCT_DY clctDy
            , DB_ID dbId
            , SQL_NAME_NO sqlNameNo
            , CURR_TOTAL_EXEC currTotalExec
            , PREV_TOTAL_EXEC prevTotalExec
            , EXEC_DIFF execDiff
            , CURR_TOTAL_BGET currTotalBget
            , PREV_TOTAL_BGET prevTotalBget
            , BGET_DIFF bgetDiff
            , CURR_TOTAL_CPU currTotalCpu
            , PREV_TOTAL_CPU prevTotalCpu
            , CPU_DIFF cpuDiff
            , CURR_TOTAL_ELA currTotalElap
            , PREV_TOTAL_ELA prevTotalElap
            , ELA_DIFF elapDiff
            , CURR_CLCT_DY currClctDy
            , PREV_CLCT_DY prevClctDy
            , CREATE_DT createDt
        FROM DAUSER.DA_SQLNAME_STATS S
        WHERE 1=1
        <if test="clctDy != null">
            <![CDATA[
        and s.CLCT_DY >= #{clctDy}
        ]]>
        </if>
        <if test="dbId != null">
            AND S.DB_ID = #{dbId}
        </if>
        <if test="sqlName != null">
            <![CDATA[
        AND S.SQL_NAME_NO in (select sql_name_no from dauser.da_sqlname_list where sql_name like '%'||#{sqlName}||'%' )
        ]]>
        </if>
        <if test="sqlNameNo != null">
        AND S.SQL_NAME_NO = #{sqlNameNo}
        </if>
        Order by CLCT_DY desc
    </select>

    <select id="getSqlName" parameterType="hashmap" resultType="com.st11.dbshowapi.repository.sql.SqlNameVO">
        SELECT /* daSqlMapper.xml/getSqlName - ns: by rohys03 */
            DB_ID dbId
            , SQL_NAME_NO sqlNameNo
            , SQL_NAME sqlName
            , rep_sql_id repSqlId
            , parsing_Schema_name parsingSchemaName
            , module module
            , last_active_time lastActiveTime
            , create_dt createDt
            , update_dt updateDt
        FROM DAUSER.DA_SQLNAME_LIST S
        WHERE 1=1
        <if test="dbId != null">
            AND S.DB_ID = #{dbId}
        </if>
        <if test="sqlName != null">
            <![CDATA[
        AND S.sql_name like '%'||#{sqlName}||'%' )
        ]]>
        </if>
        <if test="sqlNameNo != null">
            AND S.SQL_NAME_NO = #{sqlNameNo}
        </if>
    </select>

    <select id="getSqlNameMappSummary" parameterType="hashmap" resultType="com.st11.dbshowapi.repository.sql.SqlNameMappVO">
        SELECT /* daSqlMapper.xml/getSqlNameMappSummary - ns: by rohys03 */
          /*+ leading(A) */
          a.sql_name sqlName
        , a.rep_sql_id repSqlId
        , max(sql_text) sqlText
        , sum(executions) executions
        , sum(buffer_gets) bufferGets
        , sum(elapsed_time) elapsedTime
        , sum(disk_reads) diskReads
        , sum(cpu_time) cpuTime
        , max(m.last_active_time) lastActiveTime
        FROM DAUSER.DA_SQLNAME_MAPP M, DAUSER.DA_SQLNAME_LIST A
        WHERE 1=1
        AND M.clct_Dy = #{clctDy}
        and M.part_cd = #{partCd}
        and a.sql_name = M.sql_name
        and a.db_id = M.db_id
        <if test="sqlNameNo != null">
        and a.sql_name_no = #{sqlNameNo}
        </if>
        <if test="sqlName != null">
            AND a.sql_name = #{sqlName}
        </if>
        <if test="dbId != null">
            AND M.DB_ID = #{dbId}
        </if>
        Group by a.sql_name, a.rep_sql_id
    </select>

    <select id="getSqlNameMapp" parameterType="hashmap" resultType="com.st11.dbshowapi.repository.sql.SqlNameMappVO">
        SELECT /* daSqlMapper.xml/getSqlNameMapp - ns: by rohys03 */
        clct_dy
        , part_cd partCd
        , db_id dbId
        , sql_name sqlName
        , sql_id sqlId
        , rnk rnk
        , inst_id instId
        , sql_text sqlText
        , module module
        , last_active_time lastActiveTime
        , executions executions
        , buffer_gets bufferGets
        , elapsed_time elapsedTime
        , disk_reads diskReads
        , Command_Type commandType
        , parsing_Schema_name parsingSchemaName
        , cpu_time cpuTime
        FROM DAUSER.DA_SQLNAME_MAPP M
        WHERE 1=1
        and part_cd = #{partCd}
        and sql_name = #{sqlName}
        <if test="clctDy != null">
            AND clct_Dy = #{clctDy}
        </if>
        <if test="dbId != null">
            AND S.DB_ID = #{dbId}
        </if>
        order by clct_dy desc
    </select>


    <select id="getTopSqlDayList" parameterType="hashmap" resultType="com.st11.dbshowapi.repository.sql.SqlAreaDiffVO">
        SELECT /* daSqlMapper.xml/getTopSqlDayList - ns: daSqlMapper by rohys03 */
        /*+ USE_HASH(BEF) LEADING(D CUR BEF) */
              Round((CUR.EXEC_DIFF / D.DB_STATS) * 100, 2) as statRatio
            , CUR.RN rank
            , CUR.SQL_ID sqlId
            , CUR.SQL_NAME sqlName
            , (select sql_name_no from da_sqlname_list L where L.db_id = cur.db_id and L.sql_name = CUR.SQL_NAME) sqlNameNo
            , (select /*+ LEADING(T O) INDEX(T IX1_DA_SQL_FULLTEXT) */
                  Object_name
                From dauser.da_objects o, dauser.da_sql_fulltext t
                where o.object_id = t.program_id
                and t.db_id = o.db_id
                and t.sql_id = cur.sql_id
                and rownum = 1) as objectNm
            , CUR.EXEC_DIFF executions
            , CUR.BGET_DIFF bufferGets
            , CUR.CPU_DIFF cpuTime
            , CUR.ELA_DIFF elapsedTime
            , nvl(BEF.RN, '0') rank2
            , BEF.EXEC_DIFF executions2
            , BEF.BGET_DIFF bufferGets2
            , BEF.CPU_DIFF cpuTime2
            , BEF.ELA_DIFF elapsedTime2
        From   (select rownum rn, db_id, sql_id, SQL_NAME
                     , s.EXEC_DIFF, BGET_DIFF, CPU_DIFF, ELA_DIFF
                FROM   (select s.*
                        From   da_sqlId_stats s
                        where  clct_dy = #{clctDy1}
                        and    db_id = #{dbId}
                        <trim prefix="ORDER BY">
                            <if test="orderString == 'EXEC_DIFF'">  EXEC_DIFF </if>
                            <if test="orderString == 'BGET_DIFF'"> BGET_DIFF </if>
                            <if test="orderString == 'CPU_DIFF'"> CPU_DIFF </if>
                            <if test="orderString == 'ELA_DIFF'"> ELA_DIFF </if>
                        </trim>
                        <choose>
                            <when test="ascending eq 'ASC'"> ASC </when>
                            <otherwise> DESC </otherwise>
                        </choose>
                        ) s
        <![CDATA[
                where  rownum <= 100
        ]]>
                ) CUR,
                (select rownum rn, db_id, sql_id, SQL_NAME
                     , s.EXEC_DIFF, BGET_DIFF, CPU_DIFF, ELA_DIFF
                FROM   (select s.*
                        From   da_sqlId_stats s
                        where  clct_dy = #{clctDy2}
                        and    db_id = #{dbId}
                        <trim prefix="ORDER BY">
                            <if test="orderString == 'EXEC_DIFF'">  EXEC_DIFF </if>
                            <if test="orderString == 'BGET_DIFF'"> BGET_DIFF </if>
                            <if test="orderString == 'CPU_DIFF'"> CPU_DIFF </if>
                            <if test="orderString == 'ELA_DIFF'"> ELA_DIFF </if>
                        </trim>
                        <choose>
                            <when test="ascending eq 'ASC'"> ASC </when>
                            <otherwise> DESC </otherwise>
                        </choose>
                        ) s
                ) BEF
                , (select
                    ${orderString} as DB_STATS
                    , D.DB_ID
                  From da_db_stats d where  d.clct_dy = #{clctDy1} And d.db_id = #{dbId}
                ) D
        WHERE CUR.SQL_ID = BEF.SQL_ID(+)
        And cur.db_id = BEF.db_id(+)
        And cur.db_id = D.db_id(+)
        ORDER BY CUR.RN
    </select>



    <select id="getTopSqlDayListByAwr" parameterType="hashmap" resultType="com.st11.dbshowapi.repository.sql.SqlAreaDiffVO">
        Select /* daSqlMapper.xml/getTopSqlDayListByAwr - ns: daSqlMapper by rohys03 */
            round(cur.executions_sum / d.db_stats, 2) statRatio
            <trim prefix="  ," suffix=" as rank">
                <if test="orderString == 'EXEC_DIFF'">  cur.executions_rank </if>
                <if test="orderString == 'BGET_DIFF'"> cur.buffer_gets_rank </if>
                <if test="orderString == 'CPU_DIFF'"> cur.cpu_time_rank </if>
                <if test="orderString == 'ELA_DIFF'"> cur.elaps_time_rank </if>
            </trim>
            , cur.sql_id sqlId
            , nvl(pkg_sql_script.GET_SQL_NAME(substr(cur.sql_fulltext, 1, 1000)), '(!) sql text not found.') sqlName
            , ( select sql_name_no from da_sqlname_list L where L.db_id = cur.db_id and L.sql_name = trim(nvl(pkg_sql_script.GET_SQL_NAME(substr(cur.sql_fulltext, 1, 1000)), '(!) sql text not found.')) ) sqlNameNo
            , ( select /*+ leading(t o) index(t ix1_da_sql_fulltext) */ object_name from da_objects o, da_sql_fulltext t where o.object_id = t.program_id and t.db_id = o.db_id and t.sql_id = cur.sql_id and rownum = 1 ) objectNm
            , cur.executions_sum executions
            , cur.buffer_gets_sum bufferGets
            , cur.cpu_time_sum cpuTime
            , cur.elaps_time_sum elapsedTime
            <trim prefix="  ," suffix=" as rank2">
                <if test="orderString == 'EXEC_DIFF'">  bef.executions_rank </if>
                <if test="orderString == 'BGET_DIFF'"> bef.buffer_gets_rank </if>
                <if test="orderString == 'CPU_DIFF'"> bef.cpu_time_rank </if>
                <if test="orderString == 'ELA_DIFF'"> bef.elaps_time_rank </if>
            </trim>
        , bef.executions_sum executions2
            , bef.buffer_gets_sum bufferGets2
            , bef.cpu_time_sum cpuTime2
            , bef.elaps_time_sum elapsedTime2
        from (
            select  a.db_id
                , a.sql_id
                , ( select b.sql_fulltext from da_sql_fulltext b where b.db_id = a.db_id and b.sql_id = a.sql_id and rownum = 1 ) sql_fulltext
                , count(distinct plan_hash_value) plan_cnt
                , sum(executions_delta) executions_sum
                , sum(buffer_gets_delta) buffer_gets_sum
                , round(sum(cpu_time_delta) / 1000000, 2) cpu_time_sum
                , round(sum(elapsed_time_delta) / 1000000, 2) elaps_time_sum
                , case when sum(executions_delta) <![CDATA[ <=0 ]]> then null
                else round(sum(buffer_gets_delta) / sum(executions_delta), 4) end buffer_gets_avg
                , case when sum(executions_delta) <![CDATA[ <=0 ]]> then null
                else round(sum(cpu_time_delta) / sum(executions_delta) / 1000000, 4) end cpu_time_avg
                , case when sum(executions_delta) <![CDATA[ <=0 ]]> then null
                else round(sum(elapsed_time_delta) / sum(executions_delta) / 1000000, 4) end elaps_time_avg
                , row_number() over ( partition by a.db_id order by sum(a.executions_delta) desc nulls last ) executions_rank
                , row_number() over ( partition by a.db_id order by sum(a.buffer_gets_delta) desc nulls last ) buffer_gets_rank
                , row_number() over ( partition by a.db_id order by sum(a.cpu_time_delta) desc nulls last ) cpu_time_rank
                , row_number() over ( partition by a.db_id order by sum(a.elapsed_time_delta) desc nulls last ) elaps_time_rank
            from DA_AWR_SQLSTAT a
            where a.snap_dt between to_timestamp(#{clctDy1} || '000000.000', 'YYYYMMDDHH24MISS.FF3') and to_timestamp(#{clctDy1}|| '235959.999', 'YYYYMMDDHH24MISS.FF3')
            and a.db_id = #{dbId}
            group by a.db_id, a.sql_id
        ) cur
        , (
            select a.db_id
                , a.sql_id
                , count(distinct plan_hash_value) plan_cnt
                , sum(executions_delta) executions_sum
                , sum(buffer_gets_delta) buffer_gets_sum
                , round(sum(cpu_time_delta) / 1000000, 2) cpu_time_sum
                , round(sum(elapsed_time_delta) / 1000000, 2) elaps_time_sum
                , case when sum(executions_delta) <![CDATA[ <=0 ]]> then null
                else round(sum(buffer_gets_delta) / sum(executions_delta), 4) end buffer_gets_avg
                , case when sum(executions_delta)<![CDATA[ <=0 ]]> then null
                else round(sum(cpu_time_delta) / sum(executions_delta) / 1000000, 4) end cpu_time_avg
                , case when sum(executions_delta) <![CDATA[ <=0 ]]> then null
                else round(sum(elapsed_time_delta) / sum(executions_delta) / 1000000, 4) end elaps_time_avg
                , row_number() over ( partition by a.db_id order by sum(a.executions_delta) desc nulls last ) executions_rank
                , row_number() over ( partition by a.db_id order by sum(a.buffer_gets_delta) desc nulls last ) buffer_gets_rank
                , row_number() over ( partition by a.db_id order by sum(a.cpu_time_delta) desc nulls last ) cpu_time_rank
                , row_number() over ( partition by a.db_id order by sum(a.elapsed_time_delta) desc nulls last ) elaps_time_rank
            from DA_AWR_SQLSTAT a
            where a.snap_dt between to_timestamp(#{clctDy2} || '000000.000', 'YYYYMMDDHH24MISS.FF3') and to_timestamp(#{clctDy2} || '235959.999', 'YYYYMMDDHH24MISS.FF3')
            and a.db_id = #{dbId}
            group by a.db_id, a.sql_id
        ) bef
        , (select
            ${orderString} as DB_STATS
            , D.DB_ID
        From da_db_stats d where  d.clct_dy = #{clctDy1} And d.db_id = #{dbId}
        ) D
        where cur.db_id = bef.db_id(+)
        and cur.sql_id = bef.sql_id(+)
        And cur.db_id = D.db_id(+)
        order by rank
        /*      cur.executions_rank
            , cur.buffer_gets_rank
            , cur.cpu_time_rank
            , cur.elaps_time_rank*/
    </select>


</mapper>