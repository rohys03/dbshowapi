<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.st11.dbshowapi.repository.object.DaObjectMapper">

    <select id="getSyncTableList" parameterType="hashmap" resultType="com.st11.dbshowapi.repository.object.DaSyncTableVO">
        Select /* DaSyncTablesMapper.xml/getSyncTableList - ns: DaSyncTablesMapper by rohys03 */
            distinct SRC_DB sourceDb
            , TABLE_OWNER tableOwner
            , TABLE_NM tableName
            , TRGT_DB targetDb
            , S.HOSTNAME hostname
            , T.UPDATE_DT updateDt
        from DAUSER.DA_SYNC_TABLES t, DAUSER.DA_SERVER_INFO s
        where 1=1
        <if test="tableName != null">
            and TABLE_NM = #{tableName}
        </if>
        <if test="hostName != null">
            and UPPER(S.HOSTNAME) like '%'||#{hostName}||'%'
        </if>
        <![CDATA[
        and t.TRGT_DB = s.SERVER_IP(+)
        ]]>
    </select>

    <select id="getTableList" parameterType="hashmap" resultType="com.st11.dbshowapi.repository.object.DaTableVO">
        SELECT /* daObjectMapper.xml/getTableList by rohys03 */
          /*+ LEADING(D T) */
          D.DB_NM dbName,
          T.DB_ID dbId,
          T.OWNER tableOwner,
          T.TABLE_NAME tableName,
          T.LOGIC_AREA_CD logicalAreaCd1,
          T.LOGIC_AREA_CD2 logicalAreaCd2,
          T.PHSCL_AREA_CD physicalAreaCd,
          T.TABLE_COMMENTS tableComments,
          T.TABLE_CREATE_DT tableCreateDt,
          T.STD_OBJ_YN standardObjectYn
        From DAUSER.DA_DB_LIST D, DAUSER.DA_TABLES T
        WHERE D.DB_ID = T.DB_ID
        <if test="dbId != null">
            and T.DB_ID = #{dbId}
        </if>
        <if test="dbName != null">
            and T.DB_NM = #{dbName}
        </if>
        <if test="tableName != null">
            and T.TABLE_NAME = #{tableName}
        </if>
        <if test="logicalAreaCd1 != null">
            and T.LOGIC_AREA_CD = #{logicalAreaCd1}
        </if>
        <if test="logicalAreaCd2 != null">
            and T.LOGIC_AREA_CD2 = #{logicalAreaCd2}
        </if>
        ORDER BY T.LOGIC_AREA_CD nulls last, T.LOGIC_AREA_CD2 nulls first
    </select>

    <select id="getAreaCdList" parameterType="hashmap" resultType="com.st11.dbshowapi.repository.object.AreaInfoVO">
        <![CDATA[
        SELECT
          nvl(Logic_area_cd, 'Undefined') areaCd1,
          Logic_area_cd2 areaCd2,
          Count(*) allInstanceCnt,
          sum(decode(db_id, 1, 1, 0)) db1Cnt,
          sum(decode(db_id, 4, 1, 0)) db2Cnt,
          sum(decode(db_id, 5, 1, 0)) db3Cnt,
          sum(decode(db_id, 1, 0, 4, 0, 5, 0, 1)) otherInstanceCnt
        From dauser.da_tables
        Group by logic_area_cd, logic_area_cd2
        Order by logic_area_cd nulls last, logic_area_cd2 nulls first
        ]]>
    </select>

    <select id="getRefObjectList" parameterType="hashmap" resultType="com.st11.dbshowapi.repository.object.RefObjectVO">
        <![CDATA[
        SELECT /* refObjectMapper.xml/getRefObjectList - ns: RefObjectMapper by rohys03 */
          DEPTH
          , TYPE objectType
          , OWNER owner
          , NAME objectName
          , STATUS status
          , PATH referencedPath
        FROM (
        select '1' as DEPTH,
               status,
               object_type type,
               owner,
               object_name name,
               0 rn       ,
               OBJECT_NAME PATH
        from   dba_objects
        where  1 = 1
        and    object_name = upper( #{objectName} )
        and    owner = upper( #{owner} )
        and    object_type not in ( 'SYNONYM' )
        union all
        select to_char(lv),
               min( status ) status,
               type,
               owner,
               name,
               min( rn ) rn,
               PATH
        from   (
                 select d.lv,
                        o.object_type type,
                        o.owner,
--                         lpad( ( case when lv = 1 then '' else ' �� ' end ), ( ( lv ) * 2 ), '    ') || o.object_name name,
                        o.object_name name,
                        d.rn,
                        o.status,
                        PATH
                 from   (
                          select object_id,
                                 referenced_object_id,
                                 level + 1 lv ,
                                 rownum rn
                                 , 'MT_CUPN'|| SYS_CONNECT_BY_PATH((select object_name from dba_objects o  where o.object_id = d.object_id), ' / ') "PATH"
                          from   public_dependency d
                          connect by prior object_id = referenced_object_id
                          start with referenced_object_id in (
                                                               select object_id
                                                               from   dba_objects
                                                               where  1 = 1
                                                               and    object_name = upper( #{objectName} )
                                                               and    owner = upper( #{owner} )
                                                               and    object_type not in ( 'SYNONYM' )
                                                             )
                        ) d,
                        dba_objects o
                 where  d.object_id = o.object_id
                 --and    o.object_type != 'SYNONYM'
               )
        group by lv,
                 type,
                 owner,
                 name      , path

        order by rn
        )
--         WHERE STATUS <> 'INVALID'
        ]]>
    </select>

</mapper>